##############################################################################
# maali config file for swan 
##############################################################################
read -r -d '' MAALI_MODULE_WHATIS << EOF

 SWAN is a third-generation wave model, developed at Delft University of 
 Technology, that computes random, short-crested wind-generated waves in 
 coastal regions and inland waters.
  
 For further information see: 
 https://swanmodel.sourceforge.io/download/download.htm

EOF

# specify which compilers we want to build the tool with
MAALI_TOOL_COMPILERS="$MAALI_DEFAULT_INTEL_COMPILERS"

# URL to download the source code from
MAALI_URL="https://gitlab.tudelft.nl/citg/wavemodels/swan.git"

# location we are downloading the source code to
MAALI_DST=""

# where the unpacked source code is located
MAALI_TOOL_BUILD_DIR="$MAALI_BUILD_DIR/$MAALI_TOOL_NAME"

# type of tool (eg. apps, devel, python, etc.)
MAALI_TOOL_TYPE="apps"

# tool pre-requisites modules needed to install this new tool/package
MAALI_TOOL_PREREQ="metis/5.1.0 netcdf-fortran/4.5.4"

# tool build pre-requisites - not added to the module, only needed for building (loaded after MAALI_TOOL_PREREQ)
MAALI_TOOL_BUILD_PREREQ="cmake/3.21.3"

# add additional configure options
MAALI_TOOL_CONFIGURE='-DCMAKE_BUILD_TYPE:STRING=Release '
MAALI_TOOL_CONFIGURE+='-DCMAKE_Fortran_COMPILER=ifort '
MAALI_TOOL_CONFIGURE+='-DOPENMP=ON '
MAALI_TOOL_CONFIGURE+='-DNETCDF=ON '

# for auto-building module files
MAALI_MODULE_SET_LD_LIBRARY_PATH=1
MAALI_MODULE_SET_PATH=1

##############################################################################

function maali_download {
  log ".. supressing downloading as we are using a git repository"
}

##############################################################################

function maali_unpack {
  log " .. supressing unpacking as we are using a git repository"
}

##############################################################################

function maali_pre_build {
  log " .. supressing unpacking as we are using a git repository"
}

##############################################################################
function maali_cmake_build {
  # for tools that use cmake
  #allows for late evaluation
  MAALI_TOOL_CONFIGURE_EVAL=`eval echo "$MAALI_TOOL_CONFIGURE"`
  
  # clone the repo to the build directory
  maali_run "git clone $MAALI_URL $MAALI_TOOL_BUILD_DIR"
  
  # cmake likes to build in a directory of its own
  maali_makedir "$MAALI_TOOL_BUILD_DIR/$MAALI_TOOL_NAME-build"
  cd "$MAALI_TOOL_BUILD_DIR/$MAALI_TOOL_NAME-build"
  
  maali_run "cmake $MAALI_CMAKE_PATH -DCMAKE_INSTALL_PREFIX=$MAALI_INSTALL_DIR $MAALI_TOOL_CONFIGURE_EVAL "
  maali_run "make "
  maali_run "make install"

}

##############################################################################